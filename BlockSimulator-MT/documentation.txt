Design guide
------------

Content
-------

1 ) Sending messages from your BlockCode and how it is handled in the simulator core



1 )Sending messages from your BlockCode and how it is handled in the simulator core
-----------------------------------------------------------------------------------

To send a message you need
- an instance of Message (or a class derived from it)
- a network interface

Usually you WILL have to derived the Message class, as this base class does not reserve any space for application payload.
Don't hesitate to make as many subclasses as messages types you have in your application.

A block can have any number of network interfaces. Internally, a BuildingBlock manages a list of its interfaces. 
For now, only the P2PNetworkInterface (Point to Point) is available.  
It provides a bi-directionnal and full duplex link to another block. You cannot connect more than one distant interface to a P2PNetworkInterface, but
you are not required to connect it immediately.

To start a transmission from your BlockCode, you can either use the "addToOutgoingBuffer(MessagePtr message)" method of the NetworkInterface, or schedule a NetworkInterfaceEnqueueOutgoingEvent(...) from your BlockCode.



// create a new Message
Message *message = new Message();
// get a reference to an interface of this block (in this case the one connected to block 0)
P2PNetworkInterface *interface = hostBlock->getP2PNetworkInterface(0);

// schedule the transmission
Scheduler::schedule(new NetworkInterfaceEnqueueOutgoingEvent(Scheduler::now(),message, interface)));

//or add directly to outgoing queue
// interface->addToOutgoingBuffer(MessagePtr(message));

Important : do not manually delete an Event or a Message. Do not store pointers to them neither !!
Events and Messages are deleted by the simulator when it has no more internal pointers to them.

When consummed, the NetworkInterfaceEnqueueOutgoingEvent will call the addToOutgoingBuffer method.
addToOutgoingBuffer will enqueue the Message and check if no message is currently being transmitted. If the interface is available, it will schedule a NetworkInterfaceStartTransmittingEvent 