
include #data/neural_data.meld

type activated(node, int, float).
type expected(node, int, float).
type receive(node, int, sum float [<- link]).
type hiddengrad(node, int, float).
type allhiddengrad(node, int, sum float [-> link]).
type outgrad(node, int, float).
type delta(node, int, node, float).

extern float sigmoid(float).

const lrate = 0.01.

receive(A, I, W * V) :-
	link(B, A),
	weight(B, I, A, W),
	activated(B, I, V).

activated(A, I, sigmoid(V)) :-
	receive(A, I, V).

delta(A, I, B, lrate * V * G) :-
	hidden(A),
	activated(A, I, V),
	link(A, B),
	outgrad(B, I, G).

outgrad(A, I, G * (1.0 - G) * (E - G)) :-
	expected(A, I, E),
	activated(A, I, G).

allhiddengrad(A, I, V * W) :-
	hidden(A),
	weight(A, I, B, W),
	link(A, B),
	outgrad(B, I, V).

hiddengrad(A, I, V * (1.0 - V) * T) :-
	activated(A, I, V),
	allhiddengrad(A, I, T).

delta(A, I, B, lrate * V * G) :-
	input(A),
	activated(A, I, V),
	link(A, B),
	hiddengrad(B, I, G).

weight(A, I + 1, B, O + D) :-
	weight(A, I, B, O),
	delta(A, I, B, D).

