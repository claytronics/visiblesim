
include #powergrid-data.meld

type route edge(node, node).
type capacity(node, int).
type sink(node, int).
type source(node).
type linear load(node, int).
type linear changedload(node).
type linear unplugged(node).
type linear plugged(node, node).
type linear connect(node, node, int).
type linear disconnect(node).
type linear connected(node, node, int).
type linear infofree(node, node, int).
type linear free(node, node, int).
type linear total(node, int).

const maxtotal = 1000.

!source(A), !capacity(A, Cap) -o load(A, 0), {B | !edge(A, B) | infofree(B, A, Cap)}.
!sink(A, _) -o total(A, 0), unplugged(A).

[ :random B |
	unplugged(A),
	!sink(A, Total),
	!edge(A, B),
	$free(A, B, Free),
	Free >= Total,
	total(A, T),
	T < maxtotal ]
	-o plugged(A, B), connect(B, A, Total), total(A, T + 1).

/* random selection */

connect(A, B, Total),
load(A, Old)
	-o load(A, Old + Total), changedload(A), connected(A, B, Total).
	
[ :random B |
	load(A, Old),
	!capacity(A, Cap),
	Old > Cap,
	!edge(A, B),
	connected(A, B, Total) ]
	-o disconnect(B), load(A, Old - Total), changedload(A).
	
[ :random B |
	changedload(A),
	load(A, Load),
	!capacity(A, Cap),
	randint(20) < 10,
	connected(A, B, Total),
	!edge(A, B) ]
	-o disconnect(B), load(A, Load - Total), changedload(A).
	
changedload(A),
load(A, Load),
!capacity(A, Cap)
	-o load(A, Load), {B | !edge(A, B) | infofree(B, A, Cap - Load)}. 

disconnect(A),
plugged(A, B)
	-o unplugged(A).
	
infofree(A, B, Total), free(A, B, _) -o free(A, B, Total).
infofree(A, B, Total) -o free(A, B, Total).

