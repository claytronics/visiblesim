const unsigned char meld_prog[] = {
/* NUMBER OF PREDICATES */
0xb, 
/* NUMBER OF RULES */
0x6, 
/* OFFSETS TO PREDICATE DESCRIPTORS */
0x24, 0, 
0x2a, 0, 
0x33, 0, 
0x3a, 0, 
0x43, 0, 
0x4a, 0, 
0x51, 0, 
0x57, 0, 
0x5d, 0, 
0x63, 0, 
0x69, 0, 
/* OFFSETS TO RULE DESCRIPTORS */
0x6f, 0, 
0x74, 0, 
0x7a, 0, 
0x7f, 0, 
0x85, 0, 
0x8b, 0, 
/* PREDICATE DESCRIPTORS */
0x91, 0, 0x4, 0, 0, 0, 
0x92, 0, 0x12, 0, 0x1, 0x3, 0, 0, 0, 
0x93, 0, 0x22, 0, 0, 0x1, 0x2, 
0x94, 0, 0x22, 0, 0, 0x3, 0, 0, 0, 
0x95, 0, 0x4, 0, 0x1, 0x1, 0x2, 
0x96, 0, 0x4, 0, 0x1, 0x1, 0, 
0x97, 0, 0x4, 0, 0x1, 0, 
0x98, 0, 0x4, 0, 0x1, 0, 
0x99, 0, 0x4, 0, 0x1, 0, 
0x9a, 0, 0x4, 0, 0x1, 0, 
0x9b, 0, 0x4, 0, 0x1, 0, 
/* RULE DESCRIPTORS */
0x9c, 0, 0, 0x1, 0, 
0xd7, 0, 0, 0x2, 0x6, 0x3, 
0x72, 0x1, 0, 0x1, 0x7, 
0xbb, 0x1, 0, 0x2, 0x4, 0x5, 
0x54, 0x2, 0, 0x2, 0x8, 0x3, 
0x42, 0x3, 0, 0x2, 0x9, 0x3, 
/* PREDICATE BYTECODE */
/* Predicate 0: */0, 
/* Predicate 1: */0, 
/* Predicate 2: */0, 
/* Predicate 3: */0, 
/* Predicate 4: */0, 
/* Predicate 5: */0, 
/* Predicate 6: */0, 
/* Predicate 7: */0, 
/* Predicate 8: */0, 
/* Predicate 9: */0, 
/* Predicate 10: */0, 
/* RULE BYTECODE */
/* Rule 0: */0x10, 0, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1, 0x15, 0, 0, 0, 0x35, 0, 0, 0, 0, 0x11, 0x80, 0, 0x40, 0x5, 0, 0x1e, 0, 0, 0, 0, 0, 0, 0x77, 0, 0x40, 0x6, 0, 0x77, 0, 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf0, 0x1, 0, 
/* Rule 1: */0x10, 0x1, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x6, 0, 0x1, 0x15, 0, 0, 0, 0x5b, 0, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x3, 0x1, 0x1, 0x15, 0, 0, 0, 0x45, 0, 0, 0, 0, 0x22, 0, 0x1, 0x2, 0x1f, 0x3, 0, 0, 0, 0x3, 0x3c, 0x2, 0x3, 0x2, 0x60, 0x2, 0x21, 0, 0, 0, 0x40, 0x1, 0x2, 0x1e, 0x3, 0, 0, 0, 0, 0x2, 0x21, 0x1, 0x1, 0x1, 0x2, 0x1e, 0, 0, 0, 0, 0x2, 0x2, 0x79, 0x2, 0x7b, 0, 0xf0, 0x1, 0x1, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x6, 0, 0x1, 0x15, 0, 0, 0, 0x3a, 0, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x3, 0x1, 0x1, 0x1b, 0, 0, 0, 0x24, 0, 0, 0, 0x1, 0, 0x1, 0x3, 0, 0, 0, 0x40, 0x7, 0x2, 0x77, 0x2, 0x80, 0, 0xf0, 0x1, 0x1, 0, 
/* Rule 2: */0x10, 0x2, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x7, 0, 0x1, 0x15, 0, 0, 0, 0x43, 0, 0, 0, 0, 0xe, 0x2a, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x2, 0x1, 0x1, 0x15, 0, 0, 0, 0x24, 0, 0, 0, 0, 0x40, 0x4, 0x2, 0x28, 0, 0x2, 0x22, 0, 0x1, 0x3, 0x8, 0x2, 0x3, 0xf0, 0x1, 0xf, 0x80, 0, 0xf0, 0x1, 0, 
/* Rule 3: */0x10, 0x3, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x4, 0, 0x1, 0x15, 0, 0, 0, 0x57, 0, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x5, 0x1, 0x1, 0x15, 0, 0, 0, 0x41, 0, 0, 0, 0, 0x22, 0, 0x1, 0x2, 0x1f, 0x3, 0, 0, 0, 0x3, 0x3e, 0x2, 0x3, 0x2, 0x60, 0x2, 0x1d, 0, 0, 0, 0x22, 0, 0x1, 0x2, 0x1f, 0x1, 0, 0, 0, 0x3, 0x3d, 0x2, 0x3, 0x2, 0x26, 0x2, 0, 0x1, 0x80, 0, 0x7b, 0x1, 0xf0, 0x1, 0x1, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x4, 0, 0x1, 0x15, 0, 0, 0, 0x3c, 0, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x5, 0x1, 0x1, 0x1b, 0, 0, 0, 0x26, 0, 0, 0, 0x1, 0, 0x1, 0x3, 0, 0, 0, 0x40, 0x8, 0x2, 0x77, 0x2, 0x80, 0x1, 0x80, 0, 0xf0, 0x1, 0x1, 0, 
/* Rule 4: */0x10, 0x4, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x8, 0, 0x1, 0x15, 0, 0, 0, 0x8a, 0, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x3, 0x1, 0x1, 0x15, 0, 0, 0, 0x74, 0, 0, 0, 0, 0x22, 0x1, 0x1, 0x2, 0x1f, 0x7, 0, 0, 0, 0x3, 0x37, 0x4, 0x69, 0x1c, 0x4, 0x1, 0x1, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3a, 0x3, 0x4, 0x3, 0x3c, 0x2, 0x3, 0x2, 0x60, 0x2, 0x3a, 0, 0, 0, 0x40, 0x1, 0x2, 0x21, 0, 0x1, 0, 0x2, 0x1f, 0x7, 0, 0, 0, 0x3, 0x37, 0x4, 0x69, 0x1c, 0x4, 0x1, 0x1, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3a, 0x3, 0x4, 0x3, 0x26, 0x3, 0x1, 0x2, 0x1e, 0, 0, 0, 0, 0x2, 0x2, 0x79, 0x2, 0x7b, 0, 0xf0, 0x1, 0x1, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x8, 0, 0x1, 0x15, 0, 0, 0, 0x5e, 0, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x3, 0x1, 0x1, 0x15, 0, 0, 0, 0x48, 0, 0, 0, 0, 0x22, 0x1, 0x1, 0x2, 0x1f, 0x7, 0, 0, 0, 0x3, 0x37, 0x4, 0x69, 0x1c, 0x4, 0x1, 0x1, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3a, 0x3, 0x4, 0x3, 0x3b, 0x2, 0x3, 0x2, 0x60, 0x2, 0xe, 0, 0, 0, 0x40, 0x9, 0x2, 0x77, 0x2, 0x80, 0, 0xf0, 0x1, 0x1, 0, 
/* Rule 5: */0x10, 0x5, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x9, 0, 0x1, 0x15, 0, 0, 0, 0x8f, 0, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x3, 0x1, 0x1, 0x15, 0, 0, 0, 0x79, 0, 0, 0, 0, 0x22, 0, 0x1, 0x3, 0x1f, 0, 0, 0, 0, 0x4, 0x37, 0x5, 0x69, 0x1c, 0x5, 0x1, 0x1, 0x5, 0x3d, 0x4, 0x5, 0x4, 0x3c, 0x3, 0x4, 0x2, 0x7, 0x2, 0x3, 0x60, 0x3, 0x14, 0, 0, 0, 0x22, 0x1, 0x1, 0x3, 0x1f, 0x8, 0, 0, 0, 0x4, 0x3c, 0x3, 0x4, 0x2, 0x60, 0x2, 0x32, 0, 0, 0, 0x40, 0x1, 0x2, 0x1f, 0, 0, 0, 0, 0x3, 0x37, 0x4, 0x69, 0x1c, 0x4, 0x1, 0x1, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x26, 0x3, 0, 0x2, 0x1e, 0x8, 0, 0, 0, 0x1, 0x2, 0x1e, 0, 0, 0, 0, 0x2, 0x2, 0x79, 0x2, 0x7b, 0, 0xf0, 0x1, 0x1, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0x9, 0, 0x1, 0x15, 0, 0, 0, 0x5a, 0, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x3, 0x1, 0x1, 0x1b, 0, 0, 0, 0x44, 0, 0, 0, 0x1, 0x1, 0x1, 0x8, 0, 0, 0, 0x22, 0, 0x1, 0x2, 0x1f, 0, 0, 0, 0, 0x3, 0x37, 0x4, 0x69, 0x1c, 0x4, 0x1, 0x1, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x3b, 0x2, 0x3, 0x2, 0x60, 0x2, 0xe, 0, 0, 0, 0x40, 0xa, 0x2, 0x77, 0x2, 0x80, 0, 0xf0, 0x1, 0x1, 0, };

char *tuple_names[] = {"_init", "moveto", "edge", "at", "ready", "readycount", "stage1", "stage2", "stage3", "stage4", "stage5", };

char *rule_names[] = {"_init -o node-axioms.", " -o (stage1(), !at(X, Y, Z), X != 3 -o stage1(), 			!moveTo(3, Y, 0)), OR (stage1(), !at(X, Y, Z), X = 3 -o stage2()).", "stage2() -o {B | !edge(B) | 			ready(host-id)@B}.", " -o (ready(B), readycount(N), N < 3 -o readycount(N + 1)), OR (ready(B), readycount(N), N = 3 -o stage3()).", " -o (stage3(), !at(X, Y, Z), Y != ((7 + node2int(host-id)) - 1) -o stage3(), 			!moveTo(X, (7 + node2int(host-id)) - 1, 0)), OR (stage3(), !at(X, Y, Z), Y = ((7 + node2int(host-id)) - 1) -o stage4()).", " -o (stage4(), !at(X, Y, Z), (X != (0 + node2int(host-id))) || (Y != 8) -o stage4(), 			!moveTo(0 + node2int(host-id), 8, 0)), OR (stage4(), !at(X, Y, Z), X = (0 + node2int(host-id)) -o stage5()).", };

#include "extern_functions.bbh"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};
